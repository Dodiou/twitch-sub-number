import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import { SelectFileEvent } from './types/preload';

import { readNumFromFile, selectFile, writeToFile } from "./process/fs-util";
import { Logger } from './process/main-logger';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // A bit of duplication, but tracking output file here so UI can't send
  // any file it wants to save.
  let outputFile = "";

  ipcMain.handle("select-file", async (_event, readFile?: boolean) => {
    const filepath = await selectFile(mainWindow);

    const retVal: SelectFileEvent = { filepath };
    if (filepath) {
      outputFile = filepath;

      if (readFile) {
        retVal.contents = readNumFromFile(outputFile);
      }
    }

    return retVal;
  });
  ipcMain.handle("write-to-file", (_event, contents: string) => {
    if (!outputFile) {
      return;
    }

    writeToFile(outputFile, "" + contents);
  });

  Logger.bridgeToRenderer(mainWindow);

  const menu = Menu.buildFromTemplate([
    {
      label: "File",
      submenu: [
        { role: "quit" }
      ]
    },
    {
      label: 'View',
      submenu: [
        { role: 'reload' },
        { role: 'forceReload' },
        { role: 'toggleDevTools' },
        { type: 'separator' },
        { role: 'resetZoom' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { type: 'separator' },
        { role: 'togglefullscreen' }
      ]
    },
    {
      label: 'Window',
      submenu: [
        { role: 'minimize' },
        { role: 'zoom' },
        { role: 'close' }
      ]
    },
  ]);
  Menu.setApplicationMenu(menu);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
